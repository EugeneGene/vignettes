---
title: "Quick hit demos"
---

```{r, include=FALSE}
options(mrgsolve.soloc = "build")
```

These are all miscellaneous features that may be difficult to find in other
documentation.

```{r,message=FALSE}
#| message: false
#| warning: false
library(mrgsolve)
library(dplyr)
```


# `$` operator for model object gets the parameter value

If our model parameters are
```{r}
mod <- mrgsolve:::house()

param(mod)
```

we can pick a parameter value with
```{r}
mod$CL
mod$WT
```

Or slice off multiple parameters
```{r}
i_want <- c("CL", "WT")
mod[i_want]
```

# Model names

For programming with a model object, we can extract the names
```{r}
names(mod)
```

or get all of the model elements in a list (output not shown)

```{r}
my_model <- as.list(mod)
```


# Zero all random effect variances on the fly

If your model has random effects, you can easily and temporarily zero them out. 

```{r}
mod <- modlib("popex") %>% update(end=96) %>% Req(DV,CL,V)

omat(mod)
```

It is easy to simulate either with or without the random effects in the
simulation: this change can be made on the fly.

Use `zero_re` to make all random effect variances zero
```{r}
mod %>% zero_re %>% omat
```

By default, both `OMEGA` and `SIGMA` are zeroed.  Check the arguments for
`zero_re` to see how to selectively zero `OMEGA` or `SIGMA`.

Compare the population output 

```{r}
mod %>% ev(amt=100) %>% mrgsim(nid=20) %>% plot
```

with 

```{r}
mod %>% ev(amt=100) %>% zero_re %>% mrgsim(nid=20) %>% plot
```

# Plot formulae
We commonly plot simulated output with a special plot method.  By default, you
get all compartments and output variables in the plot.

```{r}
mod <- mrgsolve:::house() %>% ev(amt=100)
mod %>% mrgsim %>% plot
```

The plot can be customized with a formula selecting variables to plot. Other
arguments

to `lattice::xyplot` can be passed as well.
```{r}
mod %>% mrgsim %>% plot(CP+RESP ~ time, lty=2, col="firebrick")
```

# Get a data frame of simulated data

By default mrgsolve returns an object of simulated data (and other stuff)
```{r}
out <- mrgsim(mod)

class(out)
```

But you can get a data frame with 
```{r}
out <- mrgsim_df(mod)

class(out)
```

or

```{r}
out <- mrgsim(mod,output="df")

out <- mrgsim(mod) %>% as_tibble()
```

